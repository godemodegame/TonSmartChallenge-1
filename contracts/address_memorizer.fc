#include "imports/stdlib.fc";

const op::save = 1;
const op::request = 2;

global slice store::manager;
global slice store::memorized;

() load_data() impure inline {
    slice ds = get_data()
        .begin_parse();

    store::manager = ds~load_msg_addr();
    store::memorized = ds~load_msg_addr();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(store::manager)
            .store_slice(store::memorized)
            .end_cell()
    );
}

slice parse_sender(cell in_msg_full) inline {
    slice cs = in_msg_full.begin_parse();
    cs~load_uint(4);
    slice sender = cs~load_msg_addr();
    return sender;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int op = in_msg_body~load_int(32);
    int query_id = in_msg_body~load_uint(64);
    slice sender = parse_sender(in_msg_full);

    load_data();

    if (op == op::save) {
        throw_if(1001, ~ equal_slices(store::manager, sender));
        store::memorized = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }
    
    if (op == op::request) {
        cell msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(sender)
            .store_grams(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(3, 32)
            .store_uint(query_id, 64)
            .store_slice(store::manager)
            .store_slice(store::memorized)
            .end_cell();
        send_raw_message(msg, 64);
        return ();
    }

    throw(999);
    return ();
}
