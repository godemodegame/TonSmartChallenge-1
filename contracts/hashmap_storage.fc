#include "imports/stdlib.fc";

const op::add = 1;
const op::remove = 2;

global cell store::dict;

() load_data() impure {
    slice ds = get_data()
        .begin_parse();

    if (ds.slice_bits() == 0) {
        store::dict = null();
    } else {
        store::dict = ds~load_dict();
    }
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_dict(store::dict)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() == 0) {
        return();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::add) {
        int key = in_msg_body~load_uint(256);
        slice value = in_msg_body;
        store::dict~udict_set(256, key, value);
    }

    if (op == op::remove) {
        in_msg_body.end_parse();
        int key = -1;
        do {
           (key, slice cs, int f) = store::dict.udict_get_next?(256, key);
           if (f) {
                int valid_until = cs~load_uint(64);
                if (valid_until < now()) {
                    store::dict~udict_delete?(256, key);
                }
            }
        } until (~ f);

        if (store::dict.dict_empty?()) {
            store::dict = null();
        }
    }

    save_data();
    return();
}

;; int key - ключ по которому ищет значение
;; int valid_until - возвращает время когда устареет значение
;; slice value - значение которое лежит у этого ключа
(int, slice) get_key(int key) method_id {
    load_data();
    (slice payload, int success) = store::dict.udict_get?(256, key);
    throw_unless(98, success);

    int valid_until = payload~load_uint(64);

    return (valid_until, payload);
}